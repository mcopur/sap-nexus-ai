
--- Start of requirements.txt ---
alembic==1.14.0
annotated-types==0.7.0
anyio==4.7.0
black==24.10.0
cffi==1.17.1
click==8.1.7
cryptography==44.0.0
fastapi==0.109.2
pydantic[email]>=2.5.3,<3.0.0
pydantic-settings==2.1.0
psycopg2-binary==2.9.9
python-jose==3.3.0
python-multipart==0.0.19
SQLAlchemy==2.0.36
starlette>=0.35.1,<0.37.0
uvicorn[standard]==0.27.1
python-dotenv==1.0.1
--- End of requirements.txt ---

--- Start of .env ---
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sap_nexus

--- End of .env ---

--- Start of m.py ---
import os
from pathlib import Path

# List of folders to exclude (dependencies, builds, etc.)
excluded_dirs = [
    'node_modules', '.next', 'out', 'build', '.idea', '.bsp', '.metals',
    '.git', 'logs', 'dist', '.cache', 'coverage', 'public', '.vscode',
    '.bloop', '.sbt', '.ivy2', '.coursier', 'storybook-static', '__pycache__',
    'tests', 'test', 'venv', 'env', 'examples', 'docs', '__snapshots__', 'migrations'
]

# List of file extensions and specific files to include
included_extensions = [
    '.js', '.jsx', '.ts', '.tsx',  # JavaScript and TypeScript source files
    '.py', '.ipynb',  # Python source and notebook files
    '.json',  # JSON files (e.g., tsconfig.json, eslint.json)
    '.css', '.scss',  # Style files
    '.env',  # Environment variables
    '.config.js', '.config.ts', '.config.py',  # Configuration files
    'package.json', 'package-lock.json', 'yarn.lock',  # Dependency files
    # Python dependency files
    'requirements.txt', 'Pipfile', 'Pipfile.lock', 'pyproject.toml',
    'next.config.js', 'next.config.mjs'  # Next.js config files
]

# Load .gitignore patterns


def load_gitignore_patterns():
    gitignore_path = Path(".gitignore")
    if gitignore_path.exists():
        with open(gitignore_path, "r", encoding="utf-8") as f:
            patterns = [line.strip() for line in f if line.strip()
                        and not line.startswith("#")]
        return patterns
    return []

# Check if a file is ignored based on .gitignore patterns


def is_ignored(filepath, patterns):
    try:
        relative_filepath = filepath.relative_to(Path.cwd())
    except ValueError:
        return False
    for pattern in patterns:
        if relative_filepath.match(pattern):
            return True
    return False


# Define the directory containing your files
root_dir = "."

# Load gitignore patterns
ignore_patterns = load_gitignore_patterns()

# Open a new text file to write the combined contents
with open("project_source.txt", "w", encoding="utf-8") as outfile:
    # Walk through all directories and files
    for subdir, dirs, files in os.walk(root_dir):
        # Skip excluded directories
        dirs[:] = [d for d in dirs if d not in excluded_dirs]

        for file in files:
            filepath = Path(subdir) / file
            # Check if the file has the correct extension or is a specific included file
            if any(str(filepath).endswith(ext) for ext in included_extensions) and not is_ignored(filepath, ignore_patterns):
                try:
                    with open(filepath, "r", encoding="utf-8") as infile:
                        outfile.write(f"\n--- Start of {filepath} ---\n")
                        outfile.write(infile.read())
                        outfile.write(f"\n--- End of {filepath} ---\n")
                except Exception as e:
                    # Print error message
                    print(f"Error reading {filepath}: {e}")

print("Relevant project files have been combined into project_source.txt")

--- End of m.py ---

--- Start of app/__init__.py ---

--- End of app/__init__.py ---

--- Start of app/main.py ---
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.api.v1.api import api_router
from app.core.config import settings

app = FastAPI(title=settings.PROJECT_NAME)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root():
    return {"message": "Welcome to SAP Nexus AI API"}

app.include_router(api_router, prefix=settings.API_V1_STR)

--- End of app/main.py ---

--- Start of app/core/config.py ---
# app/core/config.py
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    PROJECT_NAME: str = "SAP Nexus AI"
    API_V1_STR: str = "/api/v1"
    DATABASE_URL: str

    class Config:
        env_file = ".env"


settings = Settings()

--- End of app/core/config.py ---

--- Start of app/core/__init__.py ---

--- End of app/core/__init__.py ---

--- Start of app/repositories/__init__.py ---

--- End of app/repositories/__init__.py ---

--- Start of app/repositories/inventory.py ---
from datetime import datetime
from sqlalchemy.orm import Session
from sqlalchemy import or_
from typing import List, Tuple, Optional
from app.models.inventory import MaterialStock, StockHistory


class InventoryRepository:
    def __init__(self, db: Session):
        self.db = db

    def get_by_material_id(self, material_id: str) -> Optional[MaterialStock]:
        """Malzeme ID'sine göre stok kaydı getirir"""
        return self.db.query(MaterialStock).filter(
            MaterialStock.material_id == material_id
        ).first()

    def list_stocks(
        self,
        skip: int = 0,
        limit: int = 100,
        search: Optional[str] = None
    ) -> Tuple[List[MaterialStock], int]:
        """Stok listesi ve toplam kayıt sayısını getirir"""
        query = self.db.query(MaterialStock)

        if search:
            query = query.filter(
                or_(
                    MaterialStock.material_id.ilike(f"%{search}%"),
                    MaterialStock.material_description.ilike(f"%{search}%")
                )
            )

        total = query.count()
        items = query.offset(skip).limit(limit).all()

        return items, total

    def create(self, material_stock: MaterialStock) -> MaterialStock:
        """Yeni stok kaydı oluşturur"""
        self.db.add(material_stock)
        self.db.commit()
        self.db.refresh(material_stock)
        return material_stock

    def update(self, material_stock: MaterialStock) -> MaterialStock:
        """Stok kaydını günceller"""
        self.db.commit()
        self.db.refresh(material_stock)
        return material_stock

    def delete(self, material_stock: MaterialStock) -> None:
        """Stok kaydını siler"""
        self.db.delete(material_stock)
        self.db.commit()

    def get_low_stock_materials(self, threshold: float) -> List[MaterialStock]:
        """Düşük stoklu malzemeleri getirir"""
        return self.db.query(MaterialStock).filter(
            MaterialStock.available <= threshold
        ).all()

    def create_stock_history(
        self,
        material_id: str,
        quantity_change: float,
        is_reserved: bool,
        previous_quantity: float,
        new_quantity: float,
        notes: Optional[str] = None
    ) -> StockHistory:
        """Stok hareketi kaydı oluşturur"""
        history = StockHistory(
            material_id=material_id,
            quantity_change=quantity_change,
            is_reserved=is_reserved,
            previous_quantity=previous_quantity,
            new_quantity=new_quantity,
            notes=notes
        )
        self.db.add(history)
        self.db.commit()
        self.db.refresh(history)
        return history

    def get_stock_history(
        self,
        material_id: str,
        start_date: datetime,
        end_date: datetime
    ) -> List[StockHistory]:
        """Belirli bir tarih aralığındaki stok hareketlerini getirir"""
        return self.db.query(StockHistory).filter(
            StockHistory.material_id == material_id,
            StockHistory.created_at >= start_date,
            StockHistory.created_at <= end_date
        ).order_by(StockHistory.created_at.asc()).all()

--- End of app/repositories/inventory.py ---

--- Start of app/models/__init__.py ---

--- End of app/models/__init__.py ---

--- Start of app/models/inventory.py ---
from sqlalchemy import Column, Integer, String, DateTime, Float, func, ForeignKey, Boolean
from sqlalchemy.orm import validates, relationship
from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field
from app.db.base import Base


class MaterialStock(Base):
    __tablename__ = "material_stocks"

    id = Column(Integer, primary_key=True, index=True)
    material_id = Column(String, unique=True, index=True)
    material_description = Column(String, nullable=True)
    quantity = Column(Float)
    reserved = Column(Float, default=0)
    available = Column(Float)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.update_available()

    def update_available(self):
        """Kullanılabilir stok miktarını günceller"""
        self.available = self.quantity - self.reserved

    @validates('reserved')
    def validate_reserved(self, key, value):
        """Reserved miktarının quantity'den büyük olmamasını sağlar"""
        if value > self.quantity:
            raise ValueError(
                "Reserved quantity cannot be greater than total quantity")
        return value


class MaterialStockBase(BaseModel):
    material_id: str
    material_description: Optional[str] = None
    quantity: float = Field(ge=0)
    reserved: float = Field(ge=0, default=0)


class MaterialStockCreate(MaterialStockBase):
    pass


class MaterialStockUpdate(BaseModel):
    material_description: Optional[str] = None
    quantity: Optional[float] = Field(ge=0, default=None)
    reserved: Optional[float] = Field(ge=0, default=None)


class MaterialStockRead(MaterialStockBase):
    id: int
    available: float
    created_at: datetime
    updated_at: Optional[datetime]

    model_config = {"from_attributes": True}


class MaterialStockReadList(BaseModel):
    items: list[MaterialStockRead]
    total: int


class StockTrendResponse(BaseModel):
    date: datetime
    quantity: float
    reserved: float
    available: float


class StockHistory(Base):
    __tablename__ = "stock_history"

    id = Column(Integer, primary_key=True, index=True)
    material_id = Column(String, ForeignKey(
        "material_stocks.material_id"), index=True)
    quantity_change = Column(Float)
    is_reserved = Column(Boolean, default=False)
    previous_quantity = Column(Float)
    new_quantity = Column(Float)
    notes = Column(String, nullable=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # Relationship
    material = relationship("MaterialStock", backref="history")


class StockHistoryResponse(BaseModel):
    id: int
    material_id: str
    quantity_change: float
    is_reserved: bool
    previous_quantity: float
    new_quantity: float
    notes: Optional[str] = None
    created_at: datetime

    model_config = {"from_attributes": True}

--- End of app/models/inventory.py ---

--- Start of app/schemas/__init__.py ---

--- End of app/schemas/__init__.py ---

--- Start of app/schemas/inventory.py ---
from pydantic import BaseModel
from typing import Optional
from datetime import datetime


class InventoryLevel(BaseModel):
    id: int
    material_id: str
    quantity: float
    reserved: float
    available: float
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True  # SQLAlchemy modelini Pydantic modele çevirmek için


class InventoryAlert(BaseModel):
    material_id: str
    alert_type: str
    threshold: int
    current_level: int
    created_at: datetime

--- End of app/schemas/inventory.py ---

--- Start of app/db/session.py ---
from sqlalchemy.orm import Session
from app.db.base import SessionLocal


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

--- End of app/db/session.py ---

--- Start of app/db/__init__.py ---

--- End of app/db/__init__.py ---

--- Start of app/db/base.py ---
# app/db/base.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

engine = create_engine(str(settings.DATABASE_URL))
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

--- End of app/db/base.py ---

--- Start of app/api/v1/__init__.py ---

--- End of app/api/v1/__init__.py ---

--- Start of app/api/v1/api.py ---
from fastapi import APIRouter
from app.api.v1.inventory import router as inventory_router
api_router = APIRouter()

api_router.include_router(
    inventory_router, prefix="/inventory", tags=["inventory"])

--- End of app/api/v1/api.py ---

--- Start of app/api/v1/inventory.py ---
from datetime import datetime
from fastapi import APIRouter, Depends, Query, HTTPException, status
from sqlalchemy.orm import Session
from typing import Optional, List
from app.db.session import get_db
from app.services.inventory import InventoryService
from app.models.inventory import (
    MaterialStockCreate,
    MaterialStockUpdate,
    MaterialStockRead,
    MaterialStockReadList,
    StockTrendResponse,
    StockHistoryResponse
)

router = APIRouter()


@router.get("/", response_model=MaterialStockReadList)
async def list_material_stocks(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    search: Optional[str] = Query(None),
    db: Session = Depends(get_db)
):
    inventory_service = InventoryService(db)
    items, total = inventory_service.list_material_stocks(skip, limit, search)
    return MaterialStockReadList(items=items, total=total)


@router.get("/{material_id}", response_model=MaterialStockRead)
async def get_material_stock(
    material_id: str,
    db: Session = Depends(get_db)
):
    inventory_service = InventoryService(db)
    return inventory_service.get_material_stock(material_id)


@router.post("/", response_model=MaterialStockRead, status_code=status.HTTP_201_CREATED)
async def create_material_stock(
    material_stock: MaterialStockCreate,
    db: Session = Depends(get_db)
):
    inventory_service = InventoryService(db)
    return inventory_service.create_material_stock(material_stock)


@router.put("/{material_id}", response_model=MaterialStockRead)
async def update_material_stock(
    material_id: str,
    material_stock: MaterialStockUpdate,
    db: Session = Depends(get_db)
):
    inventory_service = InventoryService(db)
    return inventory_service.update_material_stock(material_id, material_stock)


@router.delete("/{material_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_material_stock(
    material_id: str,
    db: Session = Depends(get_db)
):
    inventory_service = InventoryService(db)
    inventory_service.delete_material_stock(material_id)


@router.post("/{material_id}/adjust", response_model=MaterialStockRead)
async def adjust_stock(
    material_id: str,
    quantity_change: float = Query(...),
    is_reserved: bool = Query(False),
    notes: str = Query(""),
    db: Session = Depends(get_db)
):
    inventory_service = InventoryService(db)
    return inventory_service.adjust_stock(material_id, quantity_change, is_reserved, notes)


@router.get("/low-stock/list", response_model=List[MaterialStockRead])
async def get_low_stock_materials(
    threshold: float = Query(10.0, ge=0),
    db: Session = Depends(get_db)
):
    inventory_service = InventoryService(db)
    return inventory_service.get_low_stock_materials(threshold)


@router.get("/{material_id}/trend")
async def get_stock_trend(
    material_id: str,
    days: int = Query(30, ge=1, le=365),
    db: Session = Depends(get_db)
):
    # Test verisi
    from datetime import datetime, timedelta
    test_data = []
    base_quantity = 100
    for i in range(days):
        date = datetime.now() - timedelta(days=i)
        test_data.append({
            "date": date.isoformat(),
            "quantity": base_quantity,
            "reserved": base_quantity * 0.2,
            "available": base_quantity * 0.8
        })
    return test_data


@router.get("/{material_id}/history")
async def get_stock_history(
    material_id: str,
    limit: int = Query(100, ge=1, le=1000),
    db: Session = Depends(get_db)
):
    # Test verisi
    test_history = [
        {
            "id": "1",
            "date": datetime.now().isoformat(),
            "type": "IN",
            "quantity": 100,
            "description": "Initial stock",
            "reference": "REF001"
        }
    ]
    return test_history

--- End of app/api/v1/inventory.py ---

--- Start of app/services/__init__.py ---

--- End of app/services/__init__.py ---

--- Start of app/services/inventory.py ---
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from fastapi import HTTPException, status
from typing import Dict, Optional, Tuple, List

from app.models.inventory import (
    MaterialStock,
    MaterialStockCreate,
    MaterialStockUpdate,
    StockTrendResponse,
    StockHistoryResponse,
    StockHistory
)
from app.repositories.inventory import InventoryRepository


class InventoryService:
    def __init__(self, db: Session):
        self.repository = InventoryRepository(db)

    def create_material_stock(self, material_stock: MaterialStockCreate) -> MaterialStock:
        try:
            db_material_stock = MaterialStock(
                material_id=material_stock.material_id,
                material_description=material_stock.material_description,
                quantity=material_stock.quantity,
                reserved=material_stock.reserved
            )
            return self.repository.create(db_material_stock)
        except IntegrityError:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Material with ID {material_stock.material_id} already exists"
            )

    def get_material_stock(self, material_id: str) -> MaterialStock:
        material_stock = self.repository.get_by_material_id(material_id)
        if not material_stock:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Material stock with id {material_id} not found"
            )
        return material_stock

    def list_material_stocks(
        self,
        skip: int = 0,
        limit: int = 100,
        search: Optional[str] = None
    ) -> Tuple[List[MaterialStock], int]:
        return self.repository.list_stocks(skip, limit, search)

    def update_material_stock(
        self,
        material_id: str,
        material_stock: MaterialStockUpdate
    ) -> MaterialStock:
        db_material_stock = self.get_material_stock(material_id)

        if material_stock.material_description is not None:
            db_material_stock.material_description = material_stock.material_description

        if material_stock.quantity is not None:
            db_material_stock.quantity = material_stock.quantity
            db_material_stock.update_available()

        if material_stock.reserved is not None:
            try:
                db_material_stock.reserved = material_stock.reserved
                db_material_stock.update_available()
            except ValueError as e:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=str(e)
                )

        return self.repository.update(db_material_stock)

    def delete_material_stock(self, material_id: str) -> None:
        material_stock = self.get_material_stock(material_id)
        self.repository.delete(material_stock)

    def get_low_stock_materials(self, threshold: float = 10.0) -> List[MaterialStock]:
        return self.repository.get_low_stock_materials(threshold)

    def adjust_stock(
        self,
        material_id: str,
        quantity_change: float,
        is_reserved: bool = False,
        notes: Optional[str] = None
    ) -> MaterialStock:
        material_stock = self.get_material_stock(material_id)

        try:
            if is_reserved:
                previous_quantity = material_stock.reserved
                new_reserved = previous_quantity + quantity_change
                if new_reserved < 0:
                    raise ValueError("Reserved quantity cannot be negative")
                material_stock.reserved = new_reserved
            else:
                previous_quantity = material_stock.quantity
                new_quantity = previous_quantity + quantity_change
                if new_quantity < material_stock.reserved:
                    raise ValueError(
                        "Total quantity cannot be less than reserved quantity")
                material_stock.quantity = new_quantity

            material_stock.update_available()
            updated_stock = self.repository.update(material_stock)

            self.repository.create_stock_history(
                material_id=material_id,
                quantity_change=quantity_change,
                is_reserved=is_reserved,
                previous_quantity=previous_quantity,
                new_quantity=new_reserved if is_reserved else new_quantity,
                notes=notes
            )

            return updated_stock

        except ValueError as e:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=str(e)
            )

    def get_stock_trend(self, material_id: str, days: int = 30) -> List[StockTrendResponse]:
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=days)

        stock_movements = self.repository.get_stock_history(
            material_id=material_id,
            start_date=start_date,
            end_date=end_date
        )

        current_stock = self.get_material_stock(material_id)
        daily_stocks = {}

        current_date = start_date
        while current_date <= end_date:
            daily_stocks[current_date.date()] = StockTrendResponse(
                date=current_date,
                quantity=current_stock.quantity,
                reserved=current_stock.reserved,
                available=current_stock.available
            )
            current_date += timedelta(days=1)

        for movement in stock_movements:
            date = movement.created_at.date()
            if date in daily_stocks:
                stock = daily_stocks[date]
                if movement.is_reserved:
                    stock.reserved = movement.new_quantity
                    stock.available = stock.quantity - movement.new_quantity
                else:
                    stock.quantity = movement.new_quantity
                    stock.available = movement.new_quantity - stock.reserved

        return list(daily_stocks.values())

    def get_stock_history(self, material_id: str, limit: int = 100) -> List[StockHistoryResponse]:
        return [
            StockHistoryResponse.from_orm(record)
            for record in self.repository.get_stock_history_paginated(
                material_id=material_id,
                limit=limit
            )
        ]

--- End of app/services/inventory.py ---

--- Start of scripts/data_cleaning.py ---
import pandas as pd
from pathlib import Path

# Dosya Yolu Tanımları
DATA_DIR = Path(__file__).resolve().parent.parent / "data"
OUTPUT_DIR = Path(__file__).resolve().parent.parent / "output"


def load_excel_files(file_paths):
    """
    Excel dosyalarını yükler.
    """
    dataframes = {}
    for name, path in file_paths.items():
        try:
            df = pd.read_excel(path)
            dataframes[name] = df
        except Exception as e:
            print(f"Error loading {name}: {e}")
    return dataframes


def clean_and_standardize_dataframes(dataframes):
    """
    Sütun isimlerini normalize eder, boş verileri temizler
    ve sütun isimlerini birleştirme için eşitler.
    """
    for name, df in dataframes.items():
        # Sütun isimlerini büyük harfe çevirip boşlukları temizle
        df.columns = df.columns.str.upper().str.strip()
        df.dropna(inplace=True)

        # ORDERS ve OPEN_ORDERS'taki 'MATERIAL_NUMBER' sütununu 'MATERIAL' olarak yeniden adlandır
        if "MATERIAL_NUMBER" in df.columns:
            df.rename(columns={"MATERIAL_NUMBER": "MATERIAL"}, inplace=True)

        # ORDER_NUMBER'ı ORDER_ID olarak standardize et
        if "ORDER_NUMBER" in df.columns:
            df.rename(columns={"ORDER_NUMBER": "ORDER_ID"}, inplace=True)

        dataframes[name] = df
    return dataframes


def combine_dataframes(dataframes):
    """
    ORDERS, STOCK ve DELIVERY verilerini birleştirir.
    """
    # ORDERS ve STOCK birleştirme
    combined_df = dataframes["ORDERS"].merge(
        dataframes["STOCK"], on="MATERIAL", how="left"
    )
    # DELIVERY verisini ekleme
    combined_df = combined_df.merge(
        dataframes["DELIVERY"], left_on="ORDER_ID", right_on="ORDER", how="left"
    )
    return combined_df


if __name__ == "__main__":
    # Dosya Yolları
    file_paths = {
        "ORDERS": DATA_DIR / "ORDERS.XLSX",
        "DELIVERY": DATA_DIR / "DELIVERY.XLSX",
        "STOCK": DATA_DIR / "STOCK.xlsx",
        "OPEN_ORDERS": DATA_DIR / "OPEN_ORDERS.XLSX",
        "MATERIAL_LIST": DATA_DIR / "MATERIAL_LIST.xlsx",
    }

    # Veri Yükleme
    print("Loading and cleaning data...")
    dataframes = load_excel_files(file_paths)
    clean_dfs = clean_and_standardize_dataframes(dataframes)

    # Birleştirme
    print("Combining dataframes...")
    try:
        combined_df = combine_dataframes(clean_dfs)

        # Büyük veriyi CSV formatında kaydetme
        OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
        output_file = OUTPUT_DIR / "cleaned_data.csv"
        combined_df.to_csv(output_file, index=False)

        print(
            f"Data cleaning completed successfully. File saved to '{output_file}'.")
    except KeyError as e:
        print(f"Error during merging: {e}. Please check column names.")

--- End of scripts/data_cleaning.py ---

--- Start of alembic/env.py ---
# alembic/env.py
from logging.config import fileConfig
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context

# Import all models here
from app.models.inventory import MaterialStock
from app.db.base import Base
from app.core.config import settings

# this is the Alembic Config object
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Set database URL from settings
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = Base.metadata


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.
    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.
    """
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = settings.DATABASE_URL
    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

--- End of alembic/env.py ---

--- Start of alembic/versions/6719bfd8f4fa_create_material_stocks_table.py ---
"""create material stocks table

Revision ID: 6719bfd8f4fa
Revises: 
Create Date: 2024-12-14 17:23:36.213953

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6719bfd8f4fa'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

--- End of alembic/versions/6719bfd8f4fa_create_material_stocks_table.py ---

--- Start of alembic/versions/f0caf70a08ce_add_available_column.py ---
"""add available column

Revision ID: f0caf70a08ce
Revises: 8de8eaab9683
Create Date: 2024-12-14 18:52:50.296346

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f0caf70a08ce'
down_revision: Union[str, None] = '8de8eaab9683'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('material_stocks', sa.Column('available', sa.Float(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('material_stocks', 'available')
    # ### end Alembic commands ###

--- End of alembic/versions/f0caf70a08ce_add_available_column.py ---

--- Start of alembic/versions/6bc8e3c2b7b5_add_stock_history_table.py ---
"""add_stock_history_table

Revision ID: 6bc8e3c2b7b5
Revises: b30f7115edbd
Create Date: 2024-12-14 23:32:29.498891

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6bc8e3c2b7b5'
down_revision: Union[str, None] = 'b30f7115edbd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stock_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('material_id', sa.String(), nullable=True),
    sa.Column('quantity_change', sa.Float(), nullable=True),
    sa.Column('is_reserved', sa.Boolean(), nullable=True),
    sa.Column('previous_quantity', sa.Float(), nullable=True),
    sa.Column('new_quantity', sa.Float(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['material_id'], ['material_stocks.material_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_stock_history_id'), 'stock_history', ['id'], unique=False)
    op.create_index(op.f('ix_stock_history_material_id'), 'stock_history', ['material_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_stock_history_material_id'), table_name='stock_history')
    op.drop_index(op.f('ix_stock_history_id'), table_name='stock_history')
    op.drop_table('stock_history')
    # ### end Alembic commands ###

--- End of alembic/versions/6bc8e3c2b7b5_add_stock_history_table.py ---

--- Start of alembic/versions/8de8eaab9683_create_material_stocks_table.py ---
"""create material stocks table

Revision ID: 8de8eaab9683
Revises: 6719bfd8f4fa
Create Date: 2024-12-14 18:39:15.291772

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8de8eaab9683'
down_revision: Union[str, None] = '6719bfd8f4fa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('material_stocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('material_id', sa.String(), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('reserved', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_material_stocks_id'), 'material_stocks', ['id'], unique=False)
    op.create_index(op.f('ix_material_stocks_material_id'), 'material_stocks', ['material_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_material_stocks_material_id'), table_name='material_stocks')
    op.drop_index(op.f('ix_material_stocks_id'), table_name='material_stocks')
    op.drop_table('material_stocks')
    # ### end Alembic commands ###

--- End of alembic/versions/8de8eaab9683_create_material_stocks_table.py ---

--- Start of alembic/versions/b30f7115edbd_update_material_stock_model.py ---
"""update_material_stock_model

Revision ID: b30f7115edbd
Revises: f0caf70a08ce
Create Date: 2024-12-14 20:11:45.436077

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b30f7115edbd'
down_revision: Union[str, None] = 'f0caf70a08ce'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('material_stocks', sa.Column('material_description', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('material_stocks', 'material_description')
    # ### end Alembic commands ###

--- End of alembic/versions/b30f7115edbd_update_material_stock_model.py ---
